/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';
import * as trpc from '@trpc/server';
import * as yup from 'yup';
import type {
  Pets,
  ListPetsParams,
  Pet,
  CreatePetsBody,
} from './petstore.schemas';

/**
 * @summary List all pets
 */
export const listPets = (
  params?: ListPetsParams,
  version = 1,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Pets>> => {
  return axios.get(`/v${version}/pets`, {
    params,
    ...options,
  });
};

export const listPetsRoute = trpc.router().query('listPets', {
  input: yup.object({
    limit: yup.string().notRequired(),
    version: yup.number().notRequired(),
  }),
  resolve: ({ input: { version, ...params } }) => listPets(params, version),
});
/**
 * @summary Create a pet
 */
export const createPets = (
  createPetsBody: CreatePetsBody,
  version = 1,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Pet>> => {
  return axios.post(`/v${version}/pets`, createPetsBody, options);
};

export const createPetsRoute = trpc.router().mutation('createPets', {
  input: yup.object({
    version: yup.number().notRequired(),
    createPetsBody: yup
      .object({
        name: yup.string().required(),
        tag: yup.string().required(),
      })
      .required(),
  }),
  resolve: ({ input: { createPetsBody, version } }) =>
    createPets(createPetsBody, version),
});
/**
 * @summary Info for a specific pet
 */
export const showPetById = (
  petId: string,
  version = 1,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Pet>> => {
  return axios.get(`/v${version}/pets/${petId}`, options);
};

export const showPetByIdRoute = trpc.router().query('showPetById', {
  input: yup.object({
    petId: yup.string().required(),
    testId: yup.string().required(),
    version: yup.number().notRequired(),
  }),
  resolve: ({ input: { petId, version } }) => showPetById(petId, version),
});

const router = trpc
  .router()
  .merge(listPetsRoute)
  .merge(createPetsRoute)
  .merge(showPetByIdRoute);
export const petstoreRouter = trpc.router().merge('petstore.', router);
